import { FC, useCallback, useEffect, useRef, useState } from "react";
import { connect, ConnectedProps } from "react-redux";
import Head from "next/head";
import { GetAllCharacters, GetAllStarships } from "@interfaces";
import { InitialState, ItemCard } from "@types";

import { HomeActiveLoad, HomeContainer, HomeContent, HomeTabs } from "@styles/Home";

import Card from "@components/Card/Card";
import { Button, Loading } from "@styles/Globals";

const mapState = (state: InitialState) => ({
  api: state.api,
  getCharacters: state.getCharacters,
  getStarships: state.getStarships
});

const mapDipatch = {};

const connector = connect(mapState, mapDipatch);

type PropsFromRedux = ConnectedProps<typeof connector>;
type Props = PropsFromRedux & {};

const DataCharacterDefault = {
  loading: false,
  count: 1,
  next: "",
  previous: "",
  results: []
};

const DataStarshipsDefault = {
  loading: false,
  count: 1,
  next: "",
  previous: "",
  results: []
};

const Home: FC<Props> = ({ getCharacters, getStarships, api }) => {
  const [tab, setTab] = useState(0);
  const tabValidation = tab === 0;
  const apiValidation = api === "rickandmorty";
  const [dataCharacters, setDataCharacters] = useState<GetAllCharacters>(DataCharacterDefault);
  const [dataStarships, setDataStarships] = useState<GetAllStarships>(DataStarshipsDefault);
  const loadRef = useRef<HTMLDivElement|null>(null);

  const handleChangeTab = (tab: number) => () => {
    setTab(tab);
  };

  const handleGetData = useCallback(async () => {
    if (tabValidation) {
      if (dataCharacters.next !== null) {
        const page = dataCharacters.next.split("=")[1];

        setDataCharacters({ ...dataCharacters, loading: true });
        const characters = await getCharacters.getAll(page);
        const { results, ...allCharacters } = await characters;

        setDataCharacters({
          ...allCharacters,
          results: [...dataCharacters.results, ...results],
          loading: false
        });
      }
    } else {
      if (dataStarships.next !== null) {
        const page = dataStarships.next.split("=")[1];

        setDataStarships({ ...dataStarships, loading: true });
        const starships = await getStarships.getAll(page);
        const { results, ...allStarships } = await starships;
  
        setDataStarships({
          ...allStarships,
          results: [...dataStarships.results, ...results],
          loading: false
        });
      }
    }
  }, [dataCharacters, dataStarships, getCharacters, getStarships, tabValidation, api]);

  const loadMore = useCallback((entries, observer) => {
    const loadActiveElement = entries[0];
    if (loadActiveElement.isIntersecting) {
      if (!dataCharacters.loading && !dataStarships.loading) handleGetData();
    }
  }, [handleGetData, dataCharacters.loading, dataStarships.loading]);

  useEffect(() => {
    const element = loadRef.current as Element;
    const obserber = new IntersectionObserver(loadMore);

    if (element) {
      obserber.observe(element);
    }
    return () => {
      obserber.unobserve(element);
    }
  }, [loadRef, loadMore]);

  useEffect(() => {
    setDataCharacters(DataCharacterDefault);
    setDataStarships(DataStarshipsDefault);
  }, [api]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <HomeTabs>
        <Button onClick={handleChangeTab(0)} type="button">Characters</Button>
        <Button onClick={handleChangeTab(1)} type="button">
          {apiValidation ? "Episodes" : "Starships"}
        </Button>
      </HomeTabs>
      <HomeContainer>
        {dataCharacters.loading && (
          <Loading>
            <div>
              <div /><div />
            </div>
          </Loading>
        )}
        {dataStarships.loading && (
          <Loading>
            <div>
              <div /><div />
            </div>
          </Loading>
        )}
        <HomeContent>
          {tabValidation ? (
            <>
              {
                dataCharacters.results.map((character) => {
                  const itemCard = character as unknown as ItemCard;
                  return (
                    <Card
                      key={`${character.id}-${character.name}`}
                      item={itemCard}
                      type="character"
                    />
                  );
                })
              }
            </>
          ) : (
            <>
              {
                dataStarships.results.map((starship) => {
                  const itemCard = starship as unknown as ItemCard;
                  return (
                    <Card
                      key={`${starship.id}-${starship.name}`}
                      item={itemCard}
                      type="starship"
                      simple
                    />
                  );
                })
              }
            </>
          )}
        </HomeContent>
        <HomeActiveLoad ref={loadRef} />
      </HomeContainer>
    </>
  );
}

export default connector(Home);